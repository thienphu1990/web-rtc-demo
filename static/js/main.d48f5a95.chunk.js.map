{"version":3,"sources":["Appv2.js","serviceWorker.js","index.js"],"names":["localVideo","remoteVideo","inputRoomId","Bound","styled","div","mediaStreamConstraints","video","width","min","max","height","audio","fb","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","node","firebaseDB","database","localPeerConnection","RTCPeerConnection","iceServers","id","uid","console","log","roomDetail","isWatchingFirebase","App","useEffect","document","getElementById","addEventListener","handleConnection","gotRemoteMediaStream","useState","isStart","setIsStart","isShowStartBtn","setIsShowStartBtn","isShowRandomBtn","setIsShowRandomBtn","e","candidate","sendMessage","JSON","stringify","event","mediaStream","stream","style","zIndex","srcObject","data","ref","child","roomId","set","sender","message","watchFirebaseChange","on","snapshot","val","readMessage","checkExistedRoomId","Promise","promise","once","exists","getDetailRoom","msg","parse","undefined","ice","addIceCandidate","RTCIceCandidate","sdp","type","setRemoteDescription","RTCSessionDescription","then","createAnswer","answer","setLocalDescription","friendId","localDescription","catch","error","startAction","a","rID","value","ownerId","showFriendsFace","showMyFace","hangupAction","remove","navigator","mediaDevices","getUserMedia","addStream","createOffer","offer","_onChangeRoomId","length","placeholder","onChange","className","onClick","Fragment","disabled","randomId","Math","floor","random","randomAction","autoPlay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"w8CAOA,IA2EIA,EACAC,EAOAC,EAnFEC,EAAQC,IAAOC,IAAV,KAyDLC,EAAyB,CAC7BC,MAAO,CACLC,MAAO,CACLC,IAAK,IACLC,IAAK,MAEPC,OAAQ,CACNF,IAAK,IACLC,IAAK,MAGTE,OAAO,GAyBLC,EAAKC,gBAAuB,CAC9BC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,wCAEHC,EAAO,oBACTC,EAAaV,EAAGW,WAMhBC,EAAsB,IAAIC,kBAJd,CAACC,WAAY,CAC3B,CAAC,KAAQ,gCACT,CAAC,KAAQ,qCAILC,EAAKC,YAAI,IAEfC,QAAQC,IAAIH,GACZ,IACII,EAAa,KACbC,GAAqB,EAgPVC,EA9OH,WACVC,qBAAU,WAcR,OAbAnC,EAAaoC,SAASC,eAAe,eACrCpC,EAAcmC,SAASC,eAAe,gBACxBD,SAASC,eAAe,SAEvBD,SAASC,eAAe,UACxBD,SAASC,eAAe,UAEvCnC,EAAckC,SAASC,eAAe,YAGtCZ,EAAoBa,iBAAiB,eAAgBC,GACrDd,EAAoBa,iBAAiB,YAAaE,GAE3C,eAGN,IAlBa,MAoBcC,mBAAS,IApBvB,mBAoBTC,EApBS,KAoBAC,EApBA,OAqB4BF,oBAAS,GArBrC,mBAqBTG,EArBS,KAqBOC,EArBP,OAsB8BJ,oBAAS,GAtBvC,mBAsBTK,EAtBS,KAsBQC,EAtBR,KAwBVR,EAAmB,SAACS,GACrBA,EAAEC,WACHnB,QAAQC,IAAI,sBACZmB,EAAYC,KAAKC,UAAU,CAAC,IAAOJ,EAAEC,cAGrCnB,QAAQC,IAAI,iBAGVS,EAAuB,SAACa,GAC5B,IAAMC,EAAcD,EAAME,OAC1BzB,QAAQC,IAAIuB,GACZtD,EAAWwD,MAAMC,OAAS,EAC1BzD,EAAWwD,MAAMhD,MAAQ,MACzBP,EAAYyD,UAAYJ,EACTA,GAGXJ,EAAc,SAACS,GACf3B,GACJT,EAAWqC,IAAItC,GAAMuC,MAAM7B,EAAW8B,QAAQC,IAA9C,eAAuD/B,EAAvD,CAAmEgC,OAAQpC,EAAIqC,QAASN,MAGpFO,EAAsB,SAACJ,GAC3BvC,EAAWqC,IAAItC,GAAMuC,MAAMC,GAAQK,GAAG,SAAQ,SAACC,GACzCnC,IACFA,GAAqB,EACrBH,QAAQC,IAAI,wCAEd,IAAIsC,EAAMD,EAASC,MACnBC,EAAYD,OAIVE,EAAqB,SAACT,GAC1B,OAAO,IAAIU,SAAQ,SAAAC,GACjBlD,EAAWqC,IAAItC,GAAMuC,MAAMC,GAAQY,KAAK,SAAQ,SAACN,GAC/CtC,QAAQC,IAAI,oBAAoBqC,EAASO,UACzCF,EAAQL,EAASO,iBAKjBC,EAAgB,SAACd,GACrB,OAAO,IAAIU,SAAQ,SAAAC,GACjBlD,EAAWqC,IAAItC,GAAMuC,MAAMC,GAAQY,KAAK,SAAQ,SAACN,GAC/CtC,QAAQC,IAAI,gBAAgBqC,EAASC,OACrCI,EAAQL,EAASC,cAyBjBC,EAAc,SAACX,GACnB,GAAIA,GACAA,EAAKM,QAAT,CAEA,IAAIY,EAAM1B,KAAK2B,MAAMnB,EAAKM,SAC1BnC,QAAQC,IAAI,kBAAkB4B,GACjBA,EAAKK,SACHpC,SACGmD,IAAZF,EAAIG,KACNlD,QAAQC,IAAI,qBACZN,EAAoBwD,gBAAgB,IAAIC,gBAAgBL,EAAIG,OAEpC,UAAjBH,EAAIM,IAAIC,MAGftD,QAAQC,IAAI,sBACZN,EAAoB4D,qBAAqB,IAAIC,sBAAsBT,EAAIM,MACpEI,MAAK,kBAAM9D,EAAoB+D,kBAC/BD,MAAK,SAAAE,GAAM,OAAIhE,EAAoBiE,oBAAoBD,MACvDF,MAAK,WACJvD,EAAW2D,SAAWhC,EAAKgC,SAC3BzC,EAAYC,KAAKC,UAAU,CAAC,IAAO3B,EAAoBmE,uBAExDC,OAAM,SAAAC,GACLhE,QAAQgE,MAAOA,OAMK,WAAjBjB,EAAIM,IAAIC,OACftD,QAAQC,IAAI,uBACZN,EAAoB4D,qBAAqB,IAAIC,sBAAsBT,EAAIM,MACtEU,OAAM,SAAAC,GACLhE,QAAQgE,MAAOA,UAMjBC,EAAW,uCAAG,4BAAAC,EAAA,yDAClBnD,GAAkB,GAClBE,GAAmB,GACf7C,EAHc,wDAId+F,EAAM/F,EAAYgG,MAJJ,SAKI3B,EAAmB0B,GALvB,kCA3DlBjE,EAAa,CACXmE,QAAUvE,EACV+D,SAAW,GACX7B,OAJgBA,EAmELmC,EA9DXhC,QAAS,GACTD,OAAQpC,GAEVL,EAAWqC,IAAItC,GAAMuC,MAAMC,GAAQC,IAAI/B,GA4DrCkC,EAAoB+B,GARJ,+BAWhB/B,EAAoB+B,GAXJ,UAYGrB,EAAcqB,GAZjB,SAYhBjE,EAZgB,QAaL2D,SAAW/D,EACnBI,GACDoE,IAfc,QAkBlBzD,GAAW,GACX0D,IAnBkB,kCA5DD,IAACvC,IA4DA,OAAH,qDA2BXwC,EAAe,WA5EF,IAACxC,EA6Ed9B,IACDA,EAAWmE,UAAYvE,GA9ERkC,EA+EL9B,EAAW8B,OA9ExBvC,EAAWqC,IAAItC,GAAMuC,MAAMC,GAAQyC,UAiFvBvE,EAAW8B,SAWnBuC,EAAa,WACjBG,UAAUC,aAAaC,aAAapG,GACnCiF,MAAK,SAAAhC,GAAM,OAAIvD,EAAW0D,UAAYH,KACtCgC,MAAK,SAAAhC,GAAM,OAAI9B,EAAoBkF,UAAUpD,MAC7CsC,OAAM,SAAAC,GACLhE,QAAQgE,MAAM,iCAAkCA,OAI9CM,EAAkB,WACtB3E,EAAoBmF,cACnBrB,MAAK,SAAAsB,GAAK,OAAIpF,EAAoBiE,oBAAoBmB,MACtDtB,MAAK,kBAAMrC,EAAYC,KAAKC,UAAU,CAAC,IAAO3B,EAAoBmE,wBAG/DkB,EAAkB,SAAC9D,GACvB,IAAIqB,EAAMnE,EAAYgG,MACnB7B,GAAOA,EAAI0C,OAAS,EACrBlE,GAAkB,GAGlBA,GAAkB,IAItB,OACE,kBAAC1C,EAAD,KACE,uCAAayB,GAEXc,EACA,uCAAaV,GAAcA,EAAW8B,QAEtC,2BAAOsB,KAAK,OAAO4B,YAAY,gBAAgBpF,GAAG,WAChD4B,MAAO,CAAChD,MAAO,QAASG,OAAQ,QAChCsG,SAAUH,IAGd,yBAAKI,UAAU,oBAEXxE,EAEA,4BAAQd,GAAG,SAASuF,QAAS,kBAAIb,MAAjC,WAEA,kBAAC,IAAMc,SAAP,KACE,4BAAQxF,GAAG,QAAQuF,QAAS,kBAAIpB,KAAesB,UAAUzE,GAAzD,SACA,4BAAQhB,GAAG,SAASuF,QAAS,kBApDlB,WACnB,GAAIjH,EAAJ,CACA,IAAIoH,EAAWC,KAAKC,MAAoB,IAAdD,KAAKE,UAC/BvH,EAAYgG,MAAQoB,EACpBR,KAgDyCY,IAAgBL,UAAUvE,GAA3D,YAKN,yBAAKoE,UAAU,mBACX,2BAAOtF,GAAG,cAAc+F,UAAQ,IAChC,2BAAO/F,GAAG,eAAe+F,UAAQ,OCzVvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/F,SAASC,eAAe,SDwHpB,kBAAmBmE,WACrBA,UAAU4B,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd1C,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAM7B,c","file":"static/js/main.d48f5a95.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'\n// import Peer from 'peerjs';\nimport uid from 'uid'\nimport * as firebase from 'firebase';\nimport { findAllByDisplayValue } from '@testing-library/react';\n\nconst Bound = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  input{\n    text-align: center;\n    margin: 8px 0;\n  }\n  .video-container{\n    display:flex;\n    position: relative;\n    width:50%;\n    #local-video{\n      position: absolute;\n      top: 0; \n      right: 0;\n      /* max-width: 100%; */\n      width: 100%;\n      z-index:1;\n    }\n    #remote-video{\n      position: absolute;\n      top: 0;\n      right: 0;\n      /* max-width: 20%; */\n      width: 100%;\n      z-index: 0;\n    }\n  }\n  .button-container{\n    display: flex;\n    flex-direction: row;\n    width:100%;\n    height: 50px;\n    margin: 20px 0;\n    justify-content:center;\n    #start, #call, #hangup, #random{\n      width: 150px;\n      height:50px;\n      border-radius: 5px;\n      background-color: #33ADFF;\n      font-weight:bold;\n      font-size: 15px;\n      color: #fff;\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      margin: 0 10px;\n      :disabled{\n        background-color: #cccccc;\n      }\n    }\n  }\n  \n`\nconst mediaStreamConstraints = {\n  video: {\n    width: {\n      min: 640,\n      max: 1280\n    },\n    height: {\n      min: 480,\n      max: 720\n    }\n  },\n  audio: false\n}\n\nconst offerOptions = {\n  offerToReceiveVideo: 1,\n}\n\nlet localVideo;\nlet remoteVideo;\n\nlet callButton;\nlet startButton;\nlet hangupButton;\nlet randomButton;\n\nlet inputRoomId;\n\nlet startTime = null;\n\nlet localStream;\nlet remoteStream;\n\n\nlet remotePeerConnection;\n\nvar fb = firebase.initializeApp({ \n  apiKey: \"AIzaSyB-q7FU6fQQTOShT_UbybVUBOcXHAhTILo\",\n  authDomain: \"vinpearl-2f7d4.firebaseapp.com\",\n  databaseURL: \"https://vinpearl-2f7d4.firebaseio.com\",\n  projectId: \"vinpearl-2f7d4\",\n  storageBucket: \"vinpearl-2f7d4.appspot.com\",\n  messagingSenderId: \"904958325116\",\n  appId: \"1:904958325116:web:e123ec52c8eea170\"\n});\nconst node = 'vinhome/videocall'\nvar firebaseDB = fb.database();\n\nconst servers = {iceServers: [\n  {'urls': 'stun:stun.l.google.com:19302'},\n  {'urls': 'stun:stun.services.mozilla.com'},\n]};\nvar localPeerConnection = new RTCPeerConnection(servers);\n\nconst id = uid(10)\n\nconsole.log(id)\nvar partnerId = null\nvar roomDetail = null\nvar isWatchingFirebase = false\n\nconst App = () => {\n  useEffect(() => {\n    localVideo = document.getElementById(\"local-video\");\n    remoteVideo = document.getElementById(\"remote-video\");\n    startButton = document.getElementById('start')  \n    // callButton = document.getElementById('call')\n    randomButton = document.getElementById('random')\n    hangupButton = document.getElementById('hangup');\n\n    inputRoomId = document.getElementById('input-id')\n  \n    // event\n    localPeerConnection.addEventListener('icecandidate', handleConnection);\n    localPeerConnection.addEventListener('addstream', gotRemoteMediaStream);\n\n    return () => {\n      \n    }\n  }, [])\n\n  const [isStart, setIsStart] = useState('');\n  const [isShowStartBtn, setIsShowStartBtn] = useState(false)\n  const [isShowRandomBtn, setIsShowRandomBtn] = useState(true)\n\n  const handleConnection = (e) => {\n    if(e.candidate){\n      console.log('send ice candidate')\n      sendMessage(JSON.stringify({'ice': e.candidate}))\n    }\n    else \n      console.log(\"Sent All Ice\") \n  }\n\n  const gotRemoteMediaStream = (event) => {\n    const mediaStream = event.stream\n    console.log(mediaStream)\n    localVideo.style.zIndex = 2\n    localVideo.style.width = '35%'\n    remoteVideo.srcObject = mediaStream\n    remoteStream = mediaStream\n  }\n    \n  const sendMessage = (data) => {\n    if(!roomDetail) return\n    firebaseDB.ref(node).child(roomDetail.roomId).set({ ...roomDetail, sender: id, message: data })\n  }\n\n  const watchFirebaseChange = (roomId) => {\n    firebaseDB.ref(node).child(roomId).on('value',(snapshot)=>{\n      if(!isWatchingFirebase){\n        isWatchingFirebase = true\n        console.log('----- Start watching firebase -----')\n      }\n      let val = snapshot.val()\n      readMessage(val)\n    })\n  }\n\n  const checkExistedRoomId = (roomId) => {\n    return new Promise(promise => {\n      firebaseDB.ref(node).child(roomId).once('value',(snapshot)=>{\n        console.log('is existed room: ',snapshot.exists())\n        promise(snapshot.exists())\n      })\n    })\n  }\n\n  const getDetailRoom = (roomId) => {\n    return new Promise(promise => {\n      firebaseDB.ref(node).child(roomId).once('value',(snapshot)=>{\n        console.log('detail room: ',snapshot.val())\n        promise(snapshot.val())\n      })\n    })\n  }\n\n  const createRoom = (roomId) => {\n    roomDetail = {\n      ownerId : id,\n      friendId : '',\n      roomId,\n      message: '',\n      sender: id \n    }\n    firebaseDB.ref(node).child(roomId).set(roomDetail)\n  }\n\n  const removeRoom = (roomId) => {\n    firebaseDB.ref(node).child(roomId).remove()\n  }\n\n  const leaveRoom = (roomId) => {\n    // firebaseDB.ref(node).child(roomId).update({\n    // })\n  }\n    \n  const readMessage = (data) => {\n    if(!data) return\n    if(!data.message) return\n    \n    var msg = JSON.parse(data.message);\n    console.log('read firebase: ',data)\n    var sender = data.sender;\n    if (sender !== id) {\n      if (msg.ice !== undefined) {\n        console.log('add ice candidate')\n        localPeerConnection.addIceCandidate(new RTCIceCandidate(msg.ice));\n      }\n      else if (msg.sdp.type === \"offer\") {\n        // var r = confirm(\"Answer call?\");\n        // if (r == true) {\n        console.log('read message offer')\n        localPeerConnection.setRemoteDescription(new RTCSessionDescription(msg.sdp))\n          .then(() => localPeerConnection.createAnswer())\n          .then(answer => localPeerConnection.setLocalDescription(answer))\n          .then(() => {\n            roomDetail.friendId = data.friendId\n            sendMessage(JSON.stringify({'sdp': localPeerConnection.localDescription}))\n          })\n          .catch(error => {\n            console.error( error);\n          });\n        // } else {\n        //   alert(\"Rejected the call\");\n        // }\n      }\n      else if (msg.sdp.type === \"answer\") {\n        console.log('read message answer')\n        localPeerConnection.setRemoteDescription(new RTCSessionDescription(msg.sdp))\n        .catch(error => {\n          console.error( error);\n        });\n      }\n    }\n  };\n\n  const startAction = async () => {\n    setIsShowStartBtn(false)\n    setIsShowRandomBtn(false)\n    if(!inputRoomId) return\n    let rID = inputRoomId.value\n    let isExisted = await checkExistedRoomId(rID)\n    if(!isExisted){\n      createRoom(rID)\n      watchFirebaseChange(rID)\n    }\n    else{\n      watchFirebaseChange(rID)\n      roomDetail = await getDetailRoom(rID)\n      roomDetail.friendId = id;\n      if(roomDetail){\n        showFriendsFace()\n      }\n    }\n    setIsStart(true)\n    showMyFace()\n  }\n\n  const callAction = () => {\n    callButton.disabled = true\n    showFriendsFace()\n  }\n\n  const hangupAction = () => {\n    if(!roomDetail) return\n    if(roomDetail.ownerId === id){\n      removeRoom(roomDetail.roomId)\n    }\n    else{\n      leaveRoom(roomDetail.roomId)\n    }\n  }\n\n  const randomAction = () => {\n    if(!inputRoomId) return \n    let randomId = Math.floor(Math.random()*1000000000)\n    inputRoomId.value = randomId\n    _onChangeRoomId()\n  }\n\n  const showMyFace = () => {\n    navigator.mediaDevices.getUserMedia(mediaStreamConstraints)\n    .then(stream => localVideo.srcObject = stream)\n    .then(stream => localPeerConnection.addStream(stream))\n    .catch(error => {\n      console.error('Error accessing media devices.', error);\n    });\n  }\n\n  const showFriendsFace = () => {\n    localPeerConnection.createOffer()\n    .then(offer => localPeerConnection.setLocalDescription(offer))\n    .then(() => sendMessage(JSON.stringify({'sdp': localPeerConnection.localDescription})) );\n  }\n\n  const _onChangeRoomId = (e) => {\n    let val = inputRoomId.value\n    if(val && val.length > 0){\n      setIsShowStartBtn(true)\n    }\n    else{\n      setIsShowStartBtn(false)\n    }\n  }\n\n  return (\n    <Bound>\n      <p>Your ID: {id}</p>\n      {\n        isStart?\n        <p>Room ID: {roomDetail && roomDetail.roomId}</p>\n        :\n        <input type='text' placeholder=\"input room ID\" id='input-id' \n          style={{width: '250px', height: '30px'}}\n          onChange={_onChangeRoomId}/>\n      }\n      \n      <div className='button-container'>\n        {\n          isStart ?\n          // <button id=\"call\" onClick={()=>callAction()} disabled = {isShowCallBtn?false:true}>Call</button>\n          <button id=\"hangup\" onClick={()=>hangupAction()}>Hang Up</button>\n          :\n          <React.Fragment>\n            <button id=\"start\" onClick={()=>startAction()} disabled={isShowStartBtn?false:true} >Start</button>\n            <button id=\"random\" onClick={()=>randomAction()} disabled={isShowRandomBtn?false:true} >Random</button>\n          </React.Fragment>\n        }\n          \n      </div>\n      <div className='video-container'>\n          <video id=\"local-video\" autoPlay></video>\n          <video id=\"remote-video\" autoPlay></video>\n      </div>\n    </Bound>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport App from './Appv2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}